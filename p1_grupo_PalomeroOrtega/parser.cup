/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.*;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
	static TablaSimbolos tabla = new TablaSimbolos();
	public static void main(String[] arg){
		Parser parserObj = new Parser();
		Lexer miAnalizadorLexico = new Lexer(new ComplexSymbolFactory(),  new InputStreamReader(System.in), tabla);
 		parserObj.setScanner(miAnalizadorLexico);
 		try{
 			parserObj.parse();
 			tabla.imprimir();
 			}catch(Exception x){
 		x.printStackTrace();
 		System.out.println("Error fatal.\n");
 			}
 		}
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
	TablaSimbolos tabla = new TablaSimbolos();
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 

  lexer = new Lexer(f,new InputStreamReader(fis),tabla);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal     SEMI, PLUS, MINUS, TIMES,DIV, LPAREN, RPAREN, IGUAL, COMA, UMINUS;
terminal MENORIGUAL, MAYORIGUAL, IGUALIGUAL, MENOR, MAYOR;
terminal AND, OR, NOT;
terminal SI, SINO, ENTONCES, FINSI, MIENTRAS, FINMIENTRAS;
terminal BOOLEANO, REAL, TRUE, FALSO;
terminal String NUMBER; //Cambiamos a double los numeros
 terminal Simbolo ID;


/* Non terminals */
non terminal            expr_list,asignacion;

non terminal S, A, D, L,T, C, Q,B,SIG;
//non terminal Integer    expr;      // used to store evaluated subexpressions
non terminal  expr_uno, expr_dos, expr_tres, signo; //Cambiamos a double los resultados
non terminal String E;      // used to store evaluated subexpressions

/* Precedences */
precedence left AND, OR;
precedence left NOT;	
precedence nonassoc MAYOR, MENOR, IGUALIGUAL, MAYORIGUAL, MENORIGUAL;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left UMINUS;

/* The grammar rules */

 /*Axioma */
S::= S E SEMI| E SEMI ;// revisar si esta bien lo de el SEMI

/* Sentencias*/
E::= A | D | T:t {: System.out.println(t); :}
 | L | C;

/* Bucle*/
L::= MIENTRAS T S FINMIENTRAS;

/* Condicional*/
C::= SI T ENTONCES S FINSI | SI T ENTONCES S SINO S FINSI;

/* Declaraciones*/
D::= REAL ID Q | BOOLEANO ID B;
Q::= /* LAMBDA */ |  COMA ID Q ;
B::= /* LAMBDA */ |  COMA ID B ;

/* Asignaciones*/
A::=ID IGUAL T {: 
		

:};

/* Operadores */
T::= T PLUS T| T MINUS T | T TIMES T | T DIV T | T MAYORIGUAL T | T MENORIGUAL T | T IGUALIGUAL T | T MAYOR T |
 T MENOR T | T AND T | T OR T | NOT T |  NUMBER | ID | TRUE | FALSO | SIG T |   LPAREN T RPAREN;
/* Signo */
SIG ::=    MINUS      {: RESULT = -1.0;           :}
		 	%prec UMINUS
			|PLUS {: RESULT = 1.0;           :}
			;
   
			         
             
       