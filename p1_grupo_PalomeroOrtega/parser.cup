/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList; 

parser code {:
  protected Lexer lexer;
static TablaSimbolos tabla = new TablaSimbolos();

:}
action code {:
class Estructura{
String Inicio, Medio, Fin;
Estructura(){
this.Inicio="";
this.Medio="";
this.Fin="";
}

}
ArrayList<String> Resultados = new ArrayList<String>(); //Para almacenar los resultados del string
Estructura res  = new Estructura();
int linea=1;
int tmp=0;
private String newTmp(){
String aux= "tmp"+tmp;
tmp++;
return aux;
}
int label=0;
private String newLabel(){
String aux= "L"+label;
label++;
return aux;
}
/* Metodo para buscar el Resultado en el array*/
private String buscarResultado(String aux){
String auxuno = aux.substring(3);
int indice = Integer.parseInt(auxuno);
return Resultados.get(indice);
}
/* Metodo para cambiar los resultados */ 
private int cambiarResultado(String aux){
String auxuno = aux.substring(3);
int indice = Integer.parseInt(auxuno);
return indice;
}
/* Metodo para obtener el Resultado para comprobar el tipo*/
private String ObtenerResultado(String s){
String resultado;
if(s.contains("tmp")){
		resultado=buscarResultado(s);
		}else{
			resultado=s;
		}
return resultado;
}
/* Metodo para realizar las operaciones aritmeticas basicas y generar el cuarteto correspondiente*/
private String operacion(String t1, String t2, String op){
boolean uno=false;	
String auxiliar="";
try {		String resultadoUno=ObtenerResultado(t1);
			String resultadoDos=ObtenerResultado(t2);
			Double unod=Double.parseDouble(resultadoUno);
			uno=true;
			Double dos=Double.parseDouble(resultadoDos);
			auxiliar= newTmp();
			generarCuarteto("("+op+","+t1+","+ t2+","+auxiliar+")");
			switch (op){
				case "+":
						Resultados.add(String.valueOf(unod+dos));
						break;
				case "-":
						Resultados.add(String.valueOf(unod-dos));
						break;
				case "*":
						Resultados.add(String.valueOf(unod*dos));
						break;
				case "/":	
						Resultados.add(String.valueOf(unod/dos));
						break;
			}
			
        } catch (NumberFormatException e) {
			if(uno){ System.out.println("El segundo operando no es un numero");
		}else{
            System.out.println("El primer operando no es un numero");
			}
        }
return auxiliar;
}
private String comparacion(String t1, String t2, String op){
boolean uno=false;	
String auxiliar="";
String resultado="";
try {		String resultadoUno=ObtenerResultado(t1);
			String resultadoDos=ObtenerResultado(t2);
			Double unod=Double.parseDouble(resultadoUno);
			uno=true;
			Double dos=Double.parseDouble(resultadoDos);
			auxiliar= newTmp();
			generarCuarteto("("+op+","+t1+","+ t2+","+auxiliar+")");
			switch (op){
				case "<=":
						if(unod<=dos){
						resultado="True";
						}else{
						resultado="False";
						}
						Resultados.add(resultado);
						break;
				case ">=":
						if(unod>=dos){
						resultado="True";
						}else{
						resultado="False";
						}
						Resultados.add(resultado);
						break;
				case "==":
						if(unod==dos){
						resultado="True";
						}else{
						resultado="False";
						}
						Resultados.add(resultado);
						break;
				case "<":	
						if(unod<dos){
						resultado="True";
						}else{
						resultado="False";
						}
						Resultados.add(resultado);
						break;
				case ">":	
						if(unod>dos){
						resultado="True";
						}else{
						resultado="False";
						}
						Resultados.add(resultado);
						break;
			}		
        } catch (NumberFormatException e) {
			if(uno){ System.out.println("El segundo operando no es un numero");
		}else{
            System.out.println("El primer operando no es un numero");
			}
        }
return auxiliar;
}

/* Metodo para realizar las operaciones aritmeticas basicas y generar el cuarteto correspondiente*/
private String logicos(String t1, String t2, String op){	
String auxiliar="";
String ResultadoUno="";
String ResultadoDos="";
int correctos=0;
String resultado="";
//Comprobamos que t1 es un booleano
	if(t1=="True" || t1=="False" || t1.contains("tmp")){
		if(t1.contains("tmp")){
				String bol=buscarResultado(t1);
				
				if(bol=="True" || bol=="False"){
					ResultadoUno=bol;
					correctos++;
					}else{
						System.out.println("El primer valor de la operacion no tiene el tipo adecuado");
					}
			}else{
			ResultadoUno=t1;
			correctos++;
			}
		}
//Comprobamos que t2 es un booleano
	if(t2=="True" || t2=="False" || t2.contains("tmp")){
		if(t2.contains("tmp")){
				String bol=buscarResultado(t2);
				
				if(bol=="True" || bol=="False"){
					ResultadoDos=bol;
					correctos++;
					}else{
						System.out.println("El segundo valor de la operacion no tiene el tipo adecuado");
					}
			}else{
			ResultadoDos=t2;
			correctos++;
			}
		}
		if(correctos==2){
			
			auxiliar= newTmp();
			generarCuarteto("("+op+","+t1+","+ t2+","+auxiliar+")");
			
			switch (op){
				case "&":
						if(ResultadoUno=="True" && ResultadoDos=="True"){
						resultado="True";
						}else{
						resultado="False";
						}
						Resultados.add(resultado);
						break;	

				case "|":
						if(ResultadoUno=="False" && ResultadoDos=="False"){
						resultado="False";
						}else{
						resultado="True";
						}
						Resultados.add(resultado);
						break;
        }

}else{
	System.out.println("Alguna de las dos variables no tiene el tipo adecuado");
}
return auxiliar;
}

private void generarCuarteto(String cuarteto){
System.out.println(linea+" "+ cuarteto);
linea++;
}
:}
/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal     SEMI, PLUS, MINUS, TIMES,DIV, LPAREN, RPAREN, IGUAL, COMA, UMINUS;
terminal MENORIGUAL, MAYORIGUAL, IGUALIGUAL, MENOR, MAYOR;
terminal AND, OR, NOT;
terminal SI, SINO, ENTONCES, FINSI, MIENTRAS, FINMIENTRAS;
terminal BOOLEANO, REAL, TRUE, FALSO;
terminal String NUMBER; //Cambiamos a double los numeros
 terminal String ID;


/* Non terminals */

non terminal S, A, D, L, E, C, O, B, Q, SIG;
//non terminal Integer    expr;      // used to store evaluated subexpressions
non terminal String T;      // used to store evaluated subexpressions

/* Precedences */
precedence left AND, OR;
precedence left NOT;	
precedence nonassoc MAYOR, MENOR, IGUALIGUAL, MAYORIGUAL, MENORIGUAL;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left UMINUS;

/* The grammar rules */

 /*Axioma */
S::= S E | E ;// revisar si esta bien lo de el SEMI

/* Sentencias*/
E::= A SEMI | D SEMI | T:t SEMI | L | C;

/* Bucle */
L::= MIENTRAS T:t1  {: 
Estructura Condicional  = new Estructura();
Condicional.Fin = newLabel(); //Etiqueta final
Condicional.Inicio= newLabel();//Etiqueta inicio
String Resultado="";
if(t1=="True" || t1=="False" || t1.contains("tmp")){
		if(t1.contains("tmp")){
				String bol=buscarResultado(t1);
				if(bol=="True" || bol=="False"){
					Resultado=bol;
					}else{
						System.out.println("La condicion no es un valor booleano");
					}
			}else{
			Resultado=t1;
			}
		}
if(Resultado=="True"){
 
}else{
generarCuarteto("(gotofc,"+t1+", ,"+Condicional.Fin+")");
}
RESULT= Condicional;
:} S FINMIENTRAS {: 
generarCuarteto("(goto,"+((Estructura) RESULT).Inicio+",,)");
generarCuarteto("(label,"+ ((Estructura) RESULT).Fin +",,)");
:};

/* Condicional*/
C::= SI:s T:t1 ENTONCES{: 
	Estructura Condicional  = new Estructura();
	Condicional.Fin = newLabel();
	Condicional.Medio = newLabel();
	Condicional.Inicio= newLabel();
	String Resultado="";
	if(t1=="True" || t1=="False" || t1.contains("tmp")){
			if(t1.contains("tmp")){
					String bol=buscarResultado(t1);
					if(bol=="True" || bol=="False"){
						Resultado=bol;
						}else{
							System.out.println("La condicion no es un valor booleano");
						}
				}else{
				Resultado=t1;
				}
			}
		generarCuarteto("(gotofc,"+t1+", ,"+Condicional.Medio+")");
		res = Condicional;
		RESULT=Condicional;		
           :}  
 S O;
				           
O::= FINSI {:
if(RESULT ==null)
	RESULT = res;
generarCuarteto("(goto,"+((Estructura) RESULT).Medio+",,)");
generarCuarteto("(label,"+ ((Estructura) RESULT).Medio +",,)");
				           :}
| SINO{:
if(RESULT ==null)
	RESULT = res;
generarCuarteto("(label,"+ ((Estructura) RESULT).Medio +",,)");:}  S {:
generarCuarteto("(goto,"+((Estructura) RESULT).Fin+",,)");

				           :} FINSI {:
if(RESULT ==null)
	RESULT = res;
generarCuarteto("(label,"+ ((Estructura) RESULT).Fin +",,)");
				           :};

/* Declaraciones*/
D::= REAL ID:s Q {: 
			if(tabla.buscar(s)==null){
			tabla.insertar(s,"REAL","0.0");
			System.out.println("Se ha declarado la variable REAL: "+ s);
			}else{
			System.out.println("La siguiente variable REAL ya ha sido declarada:"+ s);
}
				
           :}

 | BOOLEANO ID:s B {: 
			if(tabla.buscar(s)==null){
			tabla.insertar(s,"BOOLEANO","False");
			System.out.println("Se ha declarado la variable BOOLEANO: "+ s);
			}else{
			System.out.println("La siguiente variable BOOLEANO ya ha sido declarada:"+ s);
}
				
           :};
Q::= /* LAMBDA */ |  COMA ID:s Q {:
if(tabla.buscar(s)==null){
			tabla.insertar(s,"REAL","0.0");
			System.out.println("Se ha declarado la variable REAL: "+ s);
			}else{
			System.out.println("La siguiente variable REAL ya ha sido declarada:"+ s);
}
:};
B::= /* LAMBDA */ |  COMA ID:s B {: 
			if(tabla.buscar(s)==null){
			tabla.insertar(s,"BOOLEANO","False");
			System.out.println("Se ha declarado la variable BOOLEANO: "+ s);
			}else{
			System.out.println("La siguiente variable BOOLEANO ya ha sido declarada:"+ s);
}
				
           :};

/* Asignaciones*/
A::=ID:id IGUAL T:s {:
	//Hay que comprobar si existe la varible
	Simbolo simbolo = tabla.buscar(id);
	if(tabla.buscar(id)==null){
		System.out.println("La variable (" +id+ ") no ha sido declarada");
}else{ //en el caso de que exista tendremos que comprobar los tipos

	if(simbolo.tipo=="BOOLEANO"){         //Si es Booleano
		if(s=="True" || s=="False" || s.contains("tmp")){
		if(s.contains("tmp")){
				String bol=buscarResultado(s);
				if(bol=="True" || bol=="False"){
					simbolo.valor=bol;
					}else{
						System.out.println("El valor tiene un tipo diferente a la variable "+simbolo.tipo);
					}
			}else{
			simbolo.valor=s;
}
			tabla.replace(simbolo.nombre, simbolo);
			generarCuarteto("(=,"+s+", ,"+id+")");
		}else{
			System.out.println("La variable tiene un tipo diferente al valor que se le quiere asignar");
		}		
	}
}
	if(simbolo.tipo=="REAL"){  //Si es Real
	try {
			if(s.contains("tmp")){
				Double.parseDouble(buscarResultado(s));
				simbolo.valor=buscarResultado(s);
			}else{
				Double.parseDouble(s);
				simbolo.valor=s;
}
			tabla.replace(simbolo.nombre, simbolo);
			generarCuarteto("(=,"+s+", ,"+id+")");
        } catch (NumberFormatException e) {
            System.out.println("La variable tiene un tipo diferente al valor que se le quiere asignar");
        }
	}


:};

/* Operadores */
T::= T:t1 PLUS T:t2 {: 
RESULT=operacion(t1,t2,"+");
:}			
| T:t1 MINUS T:t2 {: 
RESULT=operacion(t1,t2,"-");
:}
| T:t1 TIMES T:t2 {: 
RESULT=operacion(t1,t2,"*");
:}
| T:t1 DIV T:t2 {: 
RESULT=operacion(t1,t2,"/");

:}
| T:t1 MAYORIGUAL T:t2 {: 
RESULT=comparacion(t1,t2,">=");
:}

 | T:t1 MENORIGUAL T:t2 {: 
RESULT=comparacion(t1,t2,"<=");
:}
| T:t1 IGUALIGUAL T:t2 
{: 
RESULT=comparacion(t1,t2,"==");
:}
| T:t1 MAYOR T:t2 {: 
RESULT=comparacion(t1,t2,">");
:}
|T:t1 MENOR T:t2 {: 
RESULT=comparacion(t1,t2,"<");
:}
| T:t1 AND T:t2 {: 
RESULT=logicos(t1,t2,"&");

:}
| T:t1 OR T:t2 {: 
RESULT=logicos(t1,t2,"|");

:}
 | NOT T:t1 {: 
String auxiliar="";
String ResultadoUno="";
String resultado="";
//Comprobamos que t1 es un booleano
	if(t1=="True" || t1=="False" || t1.contains("tmp")){
		if(t1.contains("tmp")){
				String bol=buscarResultado(t1);
				
				if(bol=="True" || bol=="False"){
					ResultadoUno=bol;
					}else{
						System.out.println("El primer valor de la operacion no tiene el tipo adecuado");
					}
			}else{
			ResultadoUno=t1;
			}
		if(ResultadoUno=="True"){
		resultado="False";
		}else{
		resultado="True";
		}
		auxiliar= newTmp();
		//Utilizaremos el simbolo ! para indicar que se trata del operador logico NOT
		generarCuarteto("(!,"+t1+", ,"+auxiliar+")");
		Resultados.add(resultado);
		}else{
			System.out.println("El valor no es del tipo correcto");
}
RESULT=auxiliar;
:}
  |  NUMBER:n {: RESULT = n;           :}
  | ID:id {:
Simbolo simbolo = tabla.buscar(id);
	if(tabla.buscar(id)==null){
		System.out.println("La variable (" +id+ ") no ha sido declarada");
}else{ 
RESULT=simbolo.valor;
}
:}
  | TRUE {: RESULT = "True";           :}
  | FALSO {: RESULT = "False";           :}
  | SIG:s T:t1 {: 

try {		if(t1.contains("tmp")){
			String resultado=ObtenerResultado(t1);
			resultado = s+ resultado;
			int indice = cambiarResultado(t1);
			Double.parseDouble(resultado);
			Resultados.set(indice,resultado);
			RESULT = s + resultado;
			}else{
			Double.parseDouble(t1);
			RESULT = s + t1;
			}
	}catch(NumberFormatException e){
			System.out.println("No es un numero");
}
 :}
  | LPAREN T:t1 RPAREN {: RESULT = t1;           :};
/* Signo */
SIG ::=    MINUS      {: RESULT ="-";           :}
		 	%prec UMINUS
			|PLUS {: RESULT = "";           :}
			;
   
			         
             
       