expr_list ::= expr_list expr_uno:e SEMI         {: 
switch(Double.toString(e)){
	default:
			System.out.println(e);
			break;
	case "Infinity":
			System.out.println("INF");
			break;
	case "-Infinity":
			System.out.println("-INF");
			break;
	case "NaN":
			System.out.println("UNK");
			break;
		}:}
		
		
            | expr_uno:e SEMI                   {: 
switch(Double.toString(e)){
	default:
			System.out.println(e);
			break;
	case "Infinity":
			System.out.println("INF");
			break;
	case "-Infinity":
			System.out.println("-INF");
			break;
	case "NaN":
			System.out.println("UNK");
			break; 
}:} 

			| expr_list asignacion:e SEMI	{:
				switch(Double.toString(MEM)){
					default:
						System.out.println("MEM = " + e);
						break;
					case "Infinity":
						System.out.println("MEM = INF");
						break;
					case "-Infinity":
						System.out.println("MEM = -INF");
						break;
					case "NaN":
						System.out.println("MEM = UNK");
						break; 
			}:}
			| asignacion:e SEMI	{:
				switch(Double.toString(MEM)){
					default:
						System.out.println("MEM = " + e);
						break;
					case "Infinity":
						System.out.println("MEM = INF");
						break;
					case "-Infinity":
						System.out.println("MEM = -INF");
						break;
					case "NaN":
						System.out.println("MEM = UNK");
						break; 
			}:}
            ;

asignacion 	::= MEM IGUAL expr_uno:e1 {: RESULT = e1; MEM = e1;:}
			;
expr_uno      ::= expr_uno:e1 PLUS  expr_dos:e2         {: RESULT = e1+e2;        :}
             | expr_uno:e1 MINUS expr_dos:e2        {: RESULT = e1-e2;        :}
             | expr_dos:e1  						{: RESULT= e1; :}  
        
             ;
expr_dos ::= expr_dos:e1 TIMES expr_tres:e2        	{: RESULT = e1*e2;        :}
             | expr_dos:e1  DIV expr_tres:e2        {: RESULT = e1/e2;        :} //Aï¿½adimos la regla de la division 
			 | expr_tres:e1 				{: RESULT= e1; :}
			;
			
expr_tres ::= 	signo:s LPAREN expr_uno:e RPAREN	         {: RESULT = s*e;           :}
             | signo:s NUMBER:n	                     {: RESULT = s*n;           :}
             | MEM  								{: RESULT=MEM ;:}
             | SIN LPAREN expr_uno:e1 RPAREN        {: RESULT = Math.sin(e1);  :} //Seno
			 | COS LPAREN expr_uno:e1 RPAREN        {: RESULT = Math.cos(e1);  :} //Coseno
			 | EXP LPAREN expr_uno:e1 RPAREN        {: RESULT = Math.exp(e1);  :} //Exponente
			 | LOG LPAREN expr_uno:e1 RPAREN        {: RESULT = Math.log(e1);  :} //Logaritmo
             ;
             
signo ::=    MINUS      {: RESULT = -1.0;           :}
			| /* Nada*/ {: RESULT = 1.0;           :}
			|PLUS {: RESULT = 1.0;           :}
			;	