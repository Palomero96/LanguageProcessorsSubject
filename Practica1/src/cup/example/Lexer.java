/* The following code was generated by JFlex 1.3.5 on 29/04/19 13:37 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.*;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 29/04/19 13:37 from the specification file
 * <tt>file:/C:/Users/palom/Documents/GitHub/ProcesadoresdeLenguaje/Practica1/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\33\1\3\1\2\1\0\1\3\1\1\16\33\4\0\1\3\3\0"+
    "\1\32\1\14\2\0\1\36\1\37\1\16\1\35\1\0\1\12\1\10"+
    "\1\15\12\7\1\0\1\34\1\46\1\31\1\47\2\0\1\50\1\56"+
    "\1\26\1\51\1\17\1\6\2\32\1\4\2\32\1\24\1\55\1\5"+
    "\1\22\2\32\1\52\1\54\1\53\1\57\5\32\4\0\1\32\1\0"+
    "\2\32\1\41\1\21\1\11\1\23\1\45\1\32\1\25\2\32\1\44"+
    "\1\27\1\20\1\13\1\43\2\32\1\40\1\30\3\32\1\42\2\32"+
    "\4\0\41\33\2\0\4\32\4\0\1\32\2\0\1\33\7\0\1\32"+
    "\4\0\1\32\5\0\27\32\1\0\37\32\1\0\u01ca\32\4\0\14\32"+
    "\16\0\5\32\7\0\1\32\1\0\1\32\21\0\160\33\5\32\1\0"+
    "\2\32\2\0\4\32\10\0\1\32\1\0\3\32\1\0\1\32\1\0"+
    "\24\32\1\0\123\32\1\0\213\32\1\0\5\33\2\0\236\32\11\0"+
    "\46\32\2\0\1\32\7\0\47\32\7\0\1\32\1\0\55\33\1\0"+
    "\1\33\1\0\2\33\1\0\2\33\1\0\1\33\10\0\33\32\5\0"+
    "\3\32\15\0\5\33\6\0\1\32\4\0\13\33\5\0\53\32\37\33"+
    "\4\0\2\32\1\33\143\32\1\0\1\32\10\33\1\0\6\33\2\32"+
    "\2\33\1\0\4\33\2\32\12\33\3\32\2\0\1\32\17\0\1\33"+
    "\1\32\1\33\36\32\33\33\2\0\131\32\13\33\1\32\16\0\12\33"+
    "\41\32\11\33\2\32\4\0\1\32\5\0\26\32\4\33\1\32\11\33"+
    "\1\32\3\33\1\32\5\33\22\0\31\32\3\33\104\0\1\32\1\0"+
    "\13\32\67\0\33\33\1\0\4\33\66\32\3\33\1\32\22\33\1\32"+
    "\7\33\12\32\2\33\2\0\12\33\1\0\7\32\1\0\7\32\1\0"+
    "\3\33\1\0\10\32\2\0\2\32\2\0\26\32\1\0\7\32\1\0"+
    "\1\32\3\0\4\32\2\0\1\33\1\32\7\33\2\0\2\33\2\0"+
    "\3\33\1\32\10\0\1\33\4\0\2\32\1\0\3\32\2\33\2\0"+
    "\12\33\4\32\7\0\1\32\5\0\3\33\1\0\6\32\4\0\2\32"+
    "\2\0\26\32\1\0\7\32\1\0\2\32\1\0\2\32\1\0\2\32"+
    "\2\0\1\33\1\0\5\33\4\0\2\33\2\0\3\33\3\0\1\33"+
    "\7\0\4\32\1\0\1\32\7\0\14\33\3\32\1\33\13\0\3\33"+
    "\1\0\11\32\1\0\3\32\1\0\26\32\1\0\7\32\1\0\2\32"+
    "\1\0\5\32\2\0\1\33\1\32\10\33\1\0\3\33\1\0\3\33"+
    "\2\0\1\32\17\0\2\32\2\33\2\0\12\33\1\0\1\32\17\0"+
    "\3\33\1\0\10\32\2\0\2\32\2\0\26\32\1\0\7\32\1\0"+
    "\2\32\1\0\5\32\2\0\1\33\1\32\7\33\2\0\2\33\2\0"+
    "\3\33\10\0\2\33\4\0\2\32\1\0\3\32\2\33\2\0\12\33"+
    "\1\0\1\32\20\0\1\33\1\32\1\0\6\32\3\0\3\32\1\0"+
    "\4\32\3\0\2\32\1\0\1\32\1\0\2\32\3\0\2\32\3\0"+
    "\3\32\3\0\14\32\4\0\5\33\3\0\3\33\1\0\4\33\2\0"+
    "\1\32\6\0\1\33\16\0\12\33\11\0\1\32\7\0\3\33\1\0"+
    "\10\32\1\0\3\32\1\0\27\32\1\0\12\32\1\0\5\32\3\0"+
    "\1\32\7\33\1\0\3\33\1\0\4\33\7\0\2\33\1\0\2\32"+
    "\6\0\2\32\2\33\2\0\12\33\22\0\2\33\1\0\10\32\1\0"+
    "\3\32\1\0\27\32\1\0\12\32\1\0\5\32\2\0\1\33\1\32"+
    "\7\33\1\0\3\33\1\0\4\33\7\0\2\33\7\0\1\32\1\0"+
    "\2\32\2\33\2\0\12\33\1\0\2\32\17\0\2\33\1\0\10\32"+
    "\1\0\3\32\1\0\51\32\2\0\1\32\7\33\1\0\3\33\1\0"+
    "\4\33\1\32\10\0\1\33\10\0\2\32\2\33\2\0\12\33\12\0"+
    "\6\32\2\0\2\33\1\0\22\32\3\0\30\32\1\0\11\32\1\0"+
    "\1\32\2\0\7\32\3\0\1\33\4\0\6\33\1\0\1\33\1\0"+
    "\10\33\22\0\2\33\15\0\60\32\1\33\2\32\7\33\4\0\10\32"+
    "\10\33\1\0\12\33\47\0\2\32\1\0\1\32\2\0\2\32\1\0"+
    "\1\32\2\0\1\32\6\0\4\32\1\0\7\32\1\0\3\32\1\0"+
    "\1\32\1\0\1\32\2\0\2\32\1\0\4\32\1\33\2\32\6\33"+
    "\1\0\2\33\1\32\2\0\5\32\1\0\1\32\1\0\6\33\2\0"+
    "\12\33\2\0\4\32\40\0\1\32\27\0\2\33\6\0\12\33\13\0"+
    "\1\33\1\0\1\33\1\0\1\33\4\0\2\33\10\32\1\0\44\32"+
    "\4\0\24\33\1\0\2\33\5\32\13\33\1\0\44\33\11\0\1\33"+
    "\71\0\53\32\24\33\1\32\12\33\6\0\6\32\4\33\4\32\3\33"+
    "\1\32\3\33\2\32\7\33\3\32\4\33\15\32\14\33\1\32\17\33"+
    "\2\0\46\32\1\0\1\32\5\0\1\32\2\0\53\32\1\0\u014d\32"+
    "\1\0\4\32\2\0\7\32\1\0\1\32\1\0\4\32\2\0\51\32"+
    "\1\0\4\32\2\0\41\32\1\0\4\32\2\0\7\32\1\0\1\32"+
    "\1\0\4\32\2\0\17\32\1\0\71\32\1\0\4\32\2\0\103\32"+
    "\2\0\3\33\40\0\20\32\20\0\125\32\14\0\u026c\32\2\0\21\32"+
    "\1\0\32\32\5\0\113\32\3\0\3\32\17\0\15\32\1\0\4\32"+
    "\3\33\13\0\22\32\3\33\13\0\22\32\2\33\14\0\15\32\1\0"+
    "\3\32\1\0\2\33\14\0\64\32\40\33\3\0\1\32\3\0\2\32"+
    "\1\33\2\0\12\33\41\0\3\33\2\0\12\33\6\0\130\32\10\0"+
    "\51\32\1\33\1\32\5\0\106\32\12\0\35\32\3\0\14\33\4\0"+
    "\14\33\12\0\12\33\36\32\2\0\5\32\13\0\54\32\4\0\21\33"+
    "\7\32\2\33\6\0\12\33\46\0\27\32\5\33\4\0\65\32\12\33"+
    "\1\0\35\33\2\0\13\33\6\0\12\33\15\0\1\32\130\0\5\33"+
    "\57\32\21\33\7\32\4\0\12\33\21\0\11\33\14\0\3\33\36\32"+
    "\15\33\2\32\12\33\54\32\16\33\14\0\44\32\24\33\10\0\12\33"+
    "\3\0\3\32\12\33\44\32\122\0\3\33\1\0\25\33\4\32\1\33"+
    "\4\32\3\33\2\32\11\0\300\32\47\33\25\0\4\33\u0116\32\2\0"+
    "\6\32\2\0\46\32\2\0\6\32\2\0\10\32\1\0\1\32\1\0"+
    "\1\32\1\0\1\32\1\0\37\32\2\0\65\32\1\0\7\32\1\0"+
    "\1\32\3\0\3\32\1\0\7\32\3\0\4\32\2\0\6\32\4\0"+
    "\15\32\5\0\3\32\1\0\7\32\16\0\5\33\32\0\5\33\20\0"+
    "\2\32\23\0\1\32\13\0\5\33\5\0\6\33\1\0\1\32\15\0"+
    "\1\32\20\0\15\32\3\0\33\32\25\0\15\33\4\0\1\33\3\0"+
    "\14\33\21\0\1\32\4\0\1\32\2\0\12\32\1\0\1\32\3\0"+
    "\5\32\6\0\1\32\1\0\1\32\1\0\1\32\1\0\4\32\1\0"+
    "\13\32\2\0\4\32\5\0\5\32\4\0\1\32\21\0\51\32\u0a77\0"+
    "\57\32\1\0\57\32\1\0\205\32\6\0\4\32\3\33\2\32\14\0"+
    "\46\32\1\0\1\32\5\0\1\32\2\0\70\32\7\0\1\32\17\0"+
    "\1\33\27\32\11\0\7\32\1\0\7\32\1\0\7\32\1\0\7\32"+
    "\1\0\7\32\1\0\7\32\1\0\7\32\1\0\7\32\1\0\40\33"+
    "\57\0\1\32\u01d5\0\3\32\31\0\11\32\6\33\1\0\5\32\2\0"+
    "\5\32\4\0\126\32\2\0\2\33\2\0\3\32\1\0\132\32\1\0"+
    "\4\32\5\0\51\32\3\0\136\32\21\0\33\32\65\0\20\32\u0200\0"+
    "\u19b6\32\112\0\u51cd\32\63\0\u048d\32\103\0\56\32\2\0\u010d\32\3\0"+
    "\20\32\12\33\2\32\24\0\57\32\1\33\4\0\12\33\1\0\31\32"+
    "\7\0\1\33\120\32\2\33\45\0\11\32\2\0\147\32\2\0\4\32"+
    "\1\0\4\32\14\0\13\32\115\0\12\32\1\33\3\32\1\33\4\32"+
    "\1\33\27\32\5\33\20\0\1\32\7\0\64\32\14\0\2\33\62\32"+
    "\21\33\13\0\12\33\6\0\22\33\6\32\3\0\1\32\4\0\12\33"+
    "\34\32\10\33\2\0\27\32\15\33\14\0\35\32\3\0\4\33\57\32"+
    "\16\33\16\0\1\32\12\33\46\0\51\32\16\33\11\0\3\32\1\33"+
    "\10\32\2\33\2\0\12\33\6\0\27\32\3\0\1\32\1\33\4\0"+
    "\60\32\1\33\1\32\3\33\2\32\2\33\5\32\2\33\1\32\1\33"+
    "\1\32\30\0\3\32\2\0\13\32\5\33\2\0\3\32\2\33\12\0"+
    "\6\32\2\0\6\32\2\0\6\32\11\0\7\32\1\0\7\32\221\0"+
    "\43\32\10\33\1\0\2\33\2\0\12\33\6\0\u2ba4\32\14\0\27\32"+
    "\4\0\61\32\u2104\0\u016e\32\2\0\152\32\46\0\7\32\14\0\5\32"+
    "\5\0\1\32\1\33\12\32\1\0\15\32\1\0\5\32\1\0\1\32"+
    "\1\0\2\32\1\0\2\32\1\0\154\32\41\0\u016b\32\22\0\100\32"+
    "\2\0\66\32\50\0\15\32\3\0\20\33\20\0\7\33\14\0\2\32"+
    "\30\0\3\32\31\0\1\32\6\0\5\32\1\0\207\32\2\0\1\33"+
    "\4\0\1\32\13\0\12\33\7\0\32\32\4\0\1\32\1\0\32\32"+
    "\13\0\131\32\3\0\6\32\2\0\6\32\2\0\6\32\2\0\3\32"+
    "\3\0\2\32\3\0\2\32\22\0\3\33\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    48,    96,   144,    96,   192,   240,   288,   336,   384, 
       96,   432,   480,    96,   528,   576,   624,    96,    96,    96, 
       96,   672,   720,   768,   816,   864,   912,   960,  1008,  1056, 
     1104,  1152,  1200,  1248,  1296,  1344,  1392,    96,  1440,   432, 
     1488,  1536,  1584,   192,    96,  1632,  1680,  1728,    96,    96, 
     1776,  1824,  1872,  1920,  1968,  2016,   192,  2064,  2112,  2160, 
     2208,  2208,   192,  2256,  2304,  2352,   192,   192,   192,   192, 
     2400,  2448,  2496,  2544,  2592,  2640,  2688,  2736,  2784,  2832, 
      192,   192,   192,  2880,  2928,   192,  2976,   192,  3024,  3072, 
     3120,  3168,  3216,  3264,  3312,  3360,  3408,  3456,  3504,  3552, 
     3600,  3648,  3696,   192,  3744,   192,   192,  3792,  3840,  3888, 
     3936,   192,  3984,  4032,  4080,  4128,  4176,  4224,  4272,  4320
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\6\1\14\1\15\1\16\1\17\2\6"+
    "\1\20\6\6\1\21\1\6\1\3\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\6\1\30\1\6\1\31\1\32"+
    "\1\33\1\6\1\34\1\35\1\36\1\37\1\40\1\6"+
    "\60\3\62\0\1\5\61\0\4\6\1\0\1\6\1\0"+
    "\1\6\3\0\12\6\1\0\2\6\4\0\6\6\2\0"+
    "\10\6\4\0\4\6\1\0\1\6\1\0\1\6\3\0"+
    "\3\6\1\41\6\6\1\0\2\6\4\0\6\6\2\0"+
    "\10\6\4\0\1\42\3\6\1\0\1\6\1\0\1\6"+
    "\3\0\12\6\1\0\2\6\4\0\6\6\2\0\1\43"+
    "\7\6\7\0\1\11\1\44\1\45\1\0\1\46\3\0"+
    "\1\45\2\0\1\46\41\0\4\6\1\0\1\6\1\0"+
    "\1\6\3\0\12\6\1\0\2\6\4\0\2\6\1\47"+
    "\3\6\2\0\10\6\1\50\1\4\1\5\55\50\16\0"+
    "\1\51\45\0\1\6\1\52\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\1\6\1\53\10\6\1\0\2\6\4\0"+
    "\6\6\2\0\10\6\4\0\4\6\1\0\1\6\1\0"+
    "\1\6\3\0\12\6\1\0\2\6\4\0\6\6\2\0"+
    "\2\6\1\54\5\6\31\0\1\55\32\0\4\6\1\0"+
    "\1\6\1\0\1\6\3\0\6\6\1\56\3\6\1\0"+
    "\2\6\4\0\6\6\2\0\10\6\4\0\4\6\1\0"+
    "\1\6\1\0\1\57\3\0\12\6\1\0\2\6\4\0"+
    "\6\6\2\0\10\6\4\0\4\6\1\0\1\6\1\0"+
    "\1\60\3\0\12\6\1\0\2\6\4\0\6\6\2\0"+
    "\10\6\31\0\1\61\57\0\1\62\32\0\1\6\1\63"+
    "\2\6\1\0\1\6\1\0\1\6\3\0\12\6\1\0"+
    "\2\6\4\0\6\6\2\0\10\6\4\0\4\6\1\0"+
    "\1\6\1\0\1\6\3\0\1\64\11\6\1\0\2\6"+
    "\4\0\6\6\2\0\10\6\4\0\4\6\1\0\1\6"+
    "\1\0\1\6\3\0\12\6\1\0\2\6\4\0\6\6"+
    "\2\0\2\6\1\65\5\6\4\0\1\66\3\6\1\0"+
    "\1\6\1\0\1\6\3\0\12\6\1\0\2\6\4\0"+
    "\6\6\2\0\10\6\4\0\1\67\3\6\1\0\1\6"+
    "\1\0\1\6\3\0\12\6\1\0\2\6\4\0\6\6"+
    "\2\0\10\6\4\0\4\6\1\0\1\6\1\0\1\6"+
    "\3\0\3\6\1\70\6\6\1\0\2\6\4\0\6\6"+
    "\2\0\10\6\4\0\4\6\1\0\1\6\1\0\1\6"+
    "\3\0\12\6\1\0\2\6\4\0\6\6\2\0\3\6"+
    "\1\71\4\6\4\0\1\6\1\72\2\6\1\0\1\6"+
    "\1\0\1\6\3\0\12\6\1\0\2\6\4\0\6\6"+
    "\2\0\10\6\4\0\4\6\1\0\1\6\1\0\1\6"+
    "\3\0\5\6\1\73\4\6\1\0\2\6\4\0\6\6"+
    "\2\0\10\6\7\0\1\74\57\0\1\75\2\0\1\76"+
    "\22\0\1\76\26\0\4\6\1\0\1\6\1\0\1\6"+
    "\3\0\12\6\1\0\2\6\4\0\3\6\1\77\2\6"+
    "\2\0\10\6\16\51\1\100\41\51\4\0\4\6\1\0"+
    "\1\6\1\0\1\6\3\0\12\6\1\0\2\6\4\0"+
    "\6\6\2\0\3\6\1\101\4\6\4\0\4\6\1\0"+
    "\1\6\1\0\1\6\3\0\2\6\1\102\7\6\1\0"+
    "\2\6\4\0\6\6\2\0\10\6\4\0\4\6\1\0"+
    "\1\6\1\0\1\6\3\0\1\6\1\103\10\6\1\0"+
    "\2\6\4\0\6\6\2\0\10\6\4\0\4\6\1\0"+
    "\1\6\1\0\1\6\3\0\12\6\1\0\2\6\4\0"+
    "\1\104\5\6\2\0\10\6\4\0\4\6\1\0\1\6"+
    "\1\0\1\6\3\0\12\6\1\0\2\6\4\0\5\6"+
    "\1\105\2\0\10\6\4\0\4\6\1\0\1\6\1\0"+
    "\1\6\3\0\12\6\1\0\2\6\4\0\6\6\2\0"+
    "\1\6\1\106\6\6\4\0\4\6\1\0\1\6\1\0"+
    "\1\6\3\0\12\6\1\0\2\6\4\0\6\6\2\0"+
    "\1\107\7\6\4\0\4\6\1\0\1\6\1\0\1\6"+
    "\3\0\12\6\1\0\2\6\4\0\6\6\2\0\7\6"+
    "\1\110\4\0\1\6\1\111\2\6\1\0\1\6\1\0"+
    "\1\6\3\0\12\6\1\0\2\6\4\0\6\6\2\0"+
    "\10\6\4\0\4\6\1\0\1\6\1\0\1\6\3\0"+
    "\1\112\11\6\1\0\2\6\4\0\6\6\2\0\10\6"+
    "\4\0\4\6\1\0\1\6\1\0\1\6\3\0\3\6"+
    "\1\113\6\6\1\0\2\6\4\0\6\6\2\0\10\6"+
    "\4\0\4\6\1\0\1\6\1\0\1\6\3\0\12\6"+
    "\1\0\2\6\4\0\6\6\2\0\4\6\1\114\1\115"+
    "\2\6\4\0\4\6\1\0\1\6\1\0\1\6\3\0"+
    "\12\6\1\0\2\6\4\0\6\6\2\0\4\6\1\116"+
    "\3\6\7\0\1\74\1\0\1\45\5\0\1\45\47\0"+
    "\1\75\50\0\15\51\1\5\1\100\41\51\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\3\6\1\117\6\6"+
    "\1\0\2\6\4\0\6\6\2\0\10\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\3\6\1\120\6\6"+
    "\1\0\2\6\4\0\6\6\2\0\10\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\5\6\1\121\4\6"+
    "\1\0\2\6\4\0\6\6\2\0\10\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\122\11\6\1\0"+
    "\2\6\4\0\6\6\2\0\10\6\4\0\4\6\1\0"+
    "\1\6\1\0\1\6\3\0\3\6\1\123\6\6\1\0"+
    "\2\6\4\0\6\6\2\0\10\6\4\0\1\6\1\124"+
    "\2\6\1\0\1\6\1\0\1\6\3\0\12\6\1\0"+
    "\2\6\4\0\6\6\2\0\10\6\4\0\4\6\1\0"+
    "\1\6\1\0\1\6\3\0\5\6\1\125\4\6\1\0"+
    "\2\6\4\0\6\6\2\0\10\6\4\0\1\126\3\6"+
    "\1\0\1\6\1\0\1\6\3\0\12\6\1\0\2\6"+
    "\4\0\6\6\2\0\10\6\4\0\1\127\3\6\1\0"+
    "\1\6\1\0\1\6\3\0\12\6\1\0\2\6\4\0"+
    "\6\6\2\0\10\6\4\0\4\6\1\0\1\6\1\0"+
    "\1\6\3\0\3\6\1\130\6\6\1\0\2\6\4\0"+
    "\6\6\2\0\10\6\4\0\1\6\1\131\2\6\1\0"+
    "\1\6\1\0\1\6\3\0\12\6\1\0\2\6\4\0"+
    "\6\6\2\0\10\6\4\0\4\6\1\0\1\6\1\0"+
    "\1\6\3\0\4\6\1\132\5\6\1\0\2\6\4\0"+
    "\6\6\2\0\10\6\4\0\4\6\1\0\1\6\1\0"+
    "\1\6\3\0\12\6\1\0\2\6\4\0\6\6\2\0"+
    "\3\6\1\133\4\6\4\0\4\6\1\0\1\6\1\0"+
    "\1\6\3\0\1\134\11\6\1\0\2\6\4\0\6\6"+
    "\2\0\10\6\4\0\4\6\1\0\1\6\1\0\1\6"+
    "\3\0\1\135\11\6\1\0\2\6\4\0\6\6\2\0"+
    "\10\6\4\0\4\6\1\0\1\6\1\0\1\6\3\0"+
    "\7\6\1\136\2\6\1\0\2\6\4\0\6\6\2\0"+
    "\10\6\4\0\4\6\1\0\1\6\1\0\1\6\3\0"+
    "\5\6\1\137\4\6\1\0\2\6\4\0\6\6\2\0"+
    "\10\6\4\0\4\6\1\0\1\6\1\0\1\6\3\0"+
    "\12\6\1\0\2\6\4\0\6\6\2\0\2\6\1\140"+
    "\5\6\4\0\4\6\1\0\1\6\1\0\1\6\3\0"+
    "\12\6\1\0\2\6\4\0\6\6\2\0\1\141\7\6"+
    "\4\0\1\6\1\142\2\6\1\0\1\6\1\0\1\6"+
    "\3\0\12\6\1\0\2\6\4\0\6\6\2\0\10\6"+
    "\4\0\4\6\1\0\1\6\1\0\1\6\3\0\1\143"+
    "\11\6\1\0\2\6\4\0\6\6\2\0\10\6\4\0"+
    "\4\6\1\0\1\6\1\0\1\6\3\0\6\6\1\144"+
    "\3\6\1\0\2\6\4\0\6\6\2\0\10\6\4\0"+
    "\4\6\1\0\1\6\1\0\1\6\3\0\12\6\1\0"+
    "\2\6\4\0\6\6\2\0\1\145\7\6\4\0\1\6"+
    "\1\146\2\6\1\0\1\6\1\0\1\6\3\0\12\6"+
    "\1\0\2\6\4\0\6\6\2\0\10\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\12\6\1\0\2\6"+
    "\4\0\6\6\2\0\3\6\1\147\4\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\12\6\1\0\2\6"+
    "\4\0\6\6\2\0\4\6\1\150\3\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\6\1\151\10\6"+
    "\1\0\2\6\4\0\6\6\2\0\10\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\12\6\1\0\2\6"+
    "\4\0\6\6\2\0\4\6\1\152\3\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\3\6\1\153\6\6"+
    "\1\0\2\6\4\0\6\6\2\0\10\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\12\6\1\0\2\6"+
    "\4\0\6\6\2\0\2\6\1\154\5\6\4\0\4\6"+
    "\1\0\1\155\1\0\1\6\3\0\12\6\1\0\2\6"+
    "\4\0\6\6\2\0\10\6\4\0\4\6\1\0\1\6"+
    "\1\0\1\6\3\0\12\6\1\0\2\6\4\0\6\6"+
    "\2\0\1\156\7\6\4\0\4\6\1\0\1\6\1\0"+
    "\1\6\3\0\7\6\1\157\2\6\1\0\2\6\4\0"+
    "\6\6\2\0\10\6\4\0\4\6\1\0\1\6\1\0"+
    "\1\6\3\0\12\6\1\0\2\6\4\0\6\6\2\0"+
    "\4\6\1\160\3\6\4\0\4\6\1\0\1\6\1\0"+
    "\1\161\3\0\12\6\1\0\2\6\4\0\6\6\2\0"+
    "\10\6\4\0\4\6\1\0\1\6\1\0\1\6\3\0"+
    "\10\6\1\162\1\6\1\0\2\6\4\0\6\6\2\0"+
    "\10\6\4\0\4\6\1\0\1\6\1\0\1\6\3\0"+
    "\10\6\1\163\1\6\1\0\2\6\4\0\6\6\2\0"+
    "\10\6\4\0\4\6\1\0\1\164\1\0\1\6\3\0"+
    "\12\6\1\0\2\6\4\0\6\6\2\0\10\6\4\0"+
    "\4\6\1\0\1\6\1\0\1\6\3\0\1\6\1\165"+
    "\10\6\1\0\2\6\4\0\6\6\2\0\10\6\4\0"+
    "\4\6\1\0\1\6\1\0\1\6\3\0\11\6\1\166"+
    "\1\0\2\6\4\0\6\6\2\0\10\6\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\3\0\12\6\1\167\2\6"+
    "\4\0\6\6\2\0\10\6\15\0\1\170\57\0\1\50"+
    "\42\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  9,  1,  1,  9,  1,  1, 
     1,  9,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  0,  9,  1,  0,  0,  1,  1,  1,  9,  1,  1,  1, 
     9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private TablaSimbolos tabla;
 public Lexer(java.io.Reader in, TablaSimbolos t){
 				this(in);
 				this.tabla = t;
 }

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;
	
    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[4368];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2254) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 60: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Double.parseDouble(yytext()));  }
        case 121: break;
        case 43: 
          { return symbolFactory.newSymbol("OR", OR); }
        case 122: break;
        case 53: 
          { return symbolFactory.newSymbol("SI", SI); }
        case 123: break;
        case 3: 
        case 4: 
          {                                }
        case 124: break;
        case 10: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 125: break;
        case 13: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 126: break;
        case 2: 
        case 11: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 127: break;
        case 8: 
          { return symbolFactory.newSymbol("NUMBER", NUMBER, Double.parseDouble(yytext()));  }
        case 128: break;
        case 59: 
          { return symbolFactory.newSymbol("NUMBER", NUMBER, Double.parseDouble(yytext()));  }
        case 129: break;
        case 12: 
          {  return symbolFactory.newSymbol("DIV", DIV);  }
        case 130: break;
        case 62: 
          {  return symbolFactory.newSymbol("EXP", EXP);  }
        case 131: break;
        case 66: 
          {  return symbolFactory.newSymbol("SIN", SIN);  }
        case 132: break;
        case 67: 
          {  return symbolFactory.newSymbol("COS", COS);  }
        case 133: break;
        case 68: 
          {  return symbolFactory.newSymbol("LOG", LOG);  }
        case 134: break;
        case 25: 
          { return symbolFactory.newSymbol("MAYOR", MAYOR); }
        case 135: break;
        case 24: 
          { return symbolFactory.newSymbol("MENOR", MENOR); }
        case 136: break;
        case 16: 
          { return symbolFactory.newSymbol("IGUAL", IGUAL); }
        case 137: break;
        case 85: 
          { return symbolFactory.newSymbol("FINSI", FINSI); }
        case 138: break;
        case 87: 
          { return symbolFactory.newSymbol("FALSO", FALSO); }
        case 139: break;
        case 18: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 140: break;
        case 17: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 141: break;
        case 44: 
          { return symbolFactory.newSymbol("IGUALIGUAL", IGUALIGUAL); }
        case 142: break;
        case 48: 
          { return symbolFactory.newSymbol("MENORIGUAL", MENORIGUAL); }
        case 143: break;
        case 49: 
          { return symbolFactory.newSymbol("MAYORIGUAL", MAYORIGUAL); }
        case 144: break;
        case 56: 
          { return symbolFactory.newSymbol("NOT", NOT); }
        case 145: break;
        case 69: 
          { return symbolFactory.newSymbol("AND", AND); }
        case 146: break;
        case 106: 
          { return symbolFactory.newSymbol("BOOLEANO", BOOLEANO); }
        case 147: break;
        case 103: 
          { return symbolFactory.newSymbol("ENTONCES", ENTONCES); }
        case 148: break;
        case 105: 
          { return symbolFactory.newSymbol("MIENTRAS", MIENTRAS); }
        case 149: break;
        case 111: 
          { return symbolFactory.newSymbol("FINMIENTRAS", FINMIENTRAS); }
        case 150: break;
        case 5: 
        case 6: 
        case 7: 
        case 9: 
        case 14: 
        case 15: 
        case 21: 
        case 22: 
        case 23: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 38: 
        case 41: 
        case 42: 
        case 45: 
        case 46: 
        case 47: 
        case 50: 
        case 51: 
        case 52: 
        case 54: 
        case 55: 
        case 57: 
        case 58: 
        case 64: 
        case 65: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 83: 
        case 84: 
        case 86: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 104: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
          { 
								 Simbolo s;
								 if ((s = tabla.buscar(yytext())) == null)
								s = tabla.insertar(yytext()); return new Symbol(sym.ID, s);  }
        case 151: break;
        case 80: 
          { return symbolFactory.newSymbol("REAL", REAL); }
        case 152: break;
        case 81: 
          { return symbolFactory.newSymbol("TRUE", TRUE); }
        case 153: break;
        case 82: 
          { return symbolFactory.newSymbol("SINO", SINO); }
        case 154: break;
        case 20: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 155: break;
        case 19: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 156: break;
        case 37: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, MetodosAuxiliares.Octalconverter(yytext())); }
        case 157: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
