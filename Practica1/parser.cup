/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, UMINUS, TIMES,DIV, LPAREN, RPAREN, EXP, LOG, SIN, COS;
//terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal Double NUMBER; //Cambiamos a double los numeros


/* Non terminals */
non terminal            expr_list;
//non terminal Integer    expr;      // used to store evaluated subexpressions
non terminal Double expr, expr_uno, expr_dos, expr_tres, signo; //Cambiamos a double los resultados

/* Precedences */


/* The grammar rules */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr_uno:e SEMI                   {: System.out.println(e); :}
            ;
            
expr_uno      ::= expr_uno:e1 PLUS  expr_dos:e2         {: RESULT = e1+e2;        :}
             | expr_uno:e1 MINUS expr_dos:e2        {: RESULT = e1-e2;        :}  
             | expr_dos:e1  						{: RESULT= e1; :}  
             | SIN LPAREN expr_uno:e1 RPAREN        {: RESULT = Math.sin(e1);  :} //Seno
			 | COS LPAREN expr_uno:e1 RPAREN        {: RESULT = Math.cos(e1);  :} //Coseno
			 | EXP LPAREN expr_uno:e1 RPAREN        {: RESULT = Math.exp(e1);  :} //Exponente
			 | LOG LPAREN expr_uno:e1 RPAREN        {: RESULT = Math.log(e1);  :} //Logaritmo
             ;
expr_dos ::= expr_dos:e1 TIMES expr_tres:e2        	{: RESULT = e1*e2;        :}
             | expr_dos:e1  DIV expr_tres:e2        {: RESULT = e1/e2;        :} //Añadimos la regla de la division 
			| expr_tres:e1 				{: RESULT= e1; :}
			;
			
expr_tres ::= 	signo:s LPAREN expr_tres:e RPAREN	         {: RESULT = s*e;           :}
             | signo:s NUMBER:n	                     {: RESULT = s*n;           :}	
             ;
             
signo ::=    MINUS      {: RESULT = -1.0;           :}
			| /* Nada*/ {: RESULT = 1.0;           :}
			;	
       