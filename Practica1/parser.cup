/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.*;
import java.io.FileInputStream;

parser code {:
protected Lexer lexer;
private double MEM=0;
static TablaSimbolos tabla = new TablaSimbolos();
  
public static void main(String[] arg){
 Parser parserObj = new Parser();
 Lexer miAnalizadorLexico =
 new Lexer(new java.io.Reader(System.in), tabla);
 parserObj.setScanner(miAnalizadorLexico);
 try{
 parserObj.parse();
 tabla.imprimir();
 }catch(Exception x){
 x.printStackTrace();
 System.out.println("Error fatal.\n");
}
 }
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES,DIV, LPAREN, RPAREN, EXP, LOG, SIN, COS, IGUAL, MEM;
terminal MENORIGUAL, MAYORIGUAL, IGUALIGUAL, MENOR, MAYOR;
terminal AND, OR, NOT;
terminal SI, SINO, ENTONCES, FINSI, MIENTRAS, FINMIENTRAS;
terminal BOOLEANO, REAL, TRUE, FALSO;
terminal Double NUMBER; //Cambiamos a double los numeros
 terminal Simbolo ID;


/* Non terminals */
non terminal            expr_list,asignacion;

non terminal S, T, A, D, L, C, O, Q, QUNO, E, V, SIG;
//non terminal Integer    expr;      // used to store evaluated subexpressions
non terminal  expr_uno, expr_dos, expr_tres, signo; //Cambiamos a double los resultados

/* Precedences */


/* The grammar rules */
/*Axioma */
S::= S T | T | S A | A | S D | D | S L | L | S C | C ;

/* Bucle*/
L::= MIENTRAS O S FINMIENTRAS;

/* Condicional*/
C::= SI O ENTONCES S FINSI | SI O ENTONCES S SINO S FINSI;
/* Es posible que las prioridades de and or y not esten mal y haya que restructurar la gramatica
	ver si podemos poner V o dejamos id
*/
O::= V MAYORIGUAL V | V MENORIGUAL V | V IGUALIGUAL V | V MAYOR V | V MENOR V | O AND O | O OR O | NOT O | ID:id;
/* Declaraciones*/
D::= REAL Q | BOOLEANO Q;
Q::=ID | QUNO;
QUNO::= /* LAMBDA */ ;

/* Asignaciones*/
A::=ID IGUAL T | ID IGUAL O;

/* Sumas y restas*/
T::= T PLUS E| T MINUS E | E;
E::=E TIMES V | E DIV V | V;
V::= SIG LPAREN T RPAREN | SIG NUMBER | ID;
SIG ::=    MINUS      {: RESULT = -1.0;           :}
			| /* Nada*/ {: RESULT = 1.0;           :}
			|PLUS {: RESULT = 1.0;           :}
			;
      